### Requires REST Client for VS Code
### https://marketplace.visualstudio.com/items?itemName=humao.rest-client
###
### Edit your settings.json and add the configuration from rest-client-config.json for local tests

### Read Enititysets
GET {{protocol}}://{{host}}:{{port}}/media/

### Read Pictures
# curl http://localhost:4004/media/Pictures | jq
# @name readPictures
GET {{protocol}}://{{host}}:{{port}}/media/Pictures
### Process Response
@ID = {{readPictures.response.body.value[0].ID}}
### Read Picture
GET http://localhost:4004/media/Pictures({{ID}})/content
### Delete First Image from the list
DELETE {{protocol}}://{{host}}:{{port}}/media/Pictures({{ID}}) 


### Create Picture
# curl -X POST http://localhost:4004/media/Pictures -H "Accept: application/json" -H "Content-Type: application/json" --data '{ "ID": "da07ae51-d0d3-41e7-a737-2555a213e5a9", "mediatype": "image/png" }'
# Without providing the attribute mediatype the download will send back
# content-type: application/octet-stream
# which is different to what is documented at:
# https://cap.cloud.sap/docs/guides/generic-providers#media-data
POST {{protocol}}://{{host}}:{{port}}/media/Pictures
Accept: application/json
Content-Type: application/json

{ 
  "ID": "da07ae51-d0d3-41e7-a737-2555a213e5a9"
}

### Upload Binary
# curl -X PUT "http://localhost:4004/media/Pictures(da07ae51-d0d3-41e7-a737-2555a213e5a9)/content" -H "image/png" --data-binary @./srv/tests/Test.png
# [ <Buffer 89 50 4e 47 0d 0a 1a 0a 00 00 00 0d 49 48 44 52 00 00 01 2c 00 00 01 2c 08 06 00 00 00 79 7d 8e 75 00 00 00 01 73 52 47 42 00 ae ce 1c e9 00 00 00 06 ... >
PUT {{protocol}}://{{host}}:{{port}}/media/Pictures(da07ae51-d0d3-41e7-a737-2555a213e5a9)/content
Content-Type: image/png

< ./Test.png

### Create Picture in one request
# curl -v http://localhost:4004/media/Pictures -F file0=@./srv/tests/Test.png json='{ "ID": "da07ae51-d0d3-41e7-a737-2555a213e5a9" }' 
# This results in the following eror:
# {"error":{"code":null,"message":"No payload deserializer available for resource kind 'ENTITY' and mime type 'multipart/form-data'"}}* Rebuilt URL to: json= "ID": "da07ae51-d0d3-41e7-a737-2555a213e5a9"

### Read Binary
# curl "http://localhost:4004/media/Pictures(da07ae51-d0d3-41e7-a737-2555a213e5a9)/content"
GET {{protocol}}://{{host}}:{{port}}/media/Pictures(da07ae51-d0d3-41e7-a737-2555a213e5a9)/content

### Upload using CustomFileUploader
# [ <Buffer 2d 2d 2d 2d 2d 2d 57 65 62 4b 69 74 46 6f 72 6d 42 6f 75 6e 64 61 72 79 70 71 65 32 42 64 47 42 6e 74 77 72 32 64 31 58 0d 0a 43 6f 6e 74 65 6e 74 2d ... >
GET http://localhost:4004/media/Pictures(68b593fd-fb02-4ce7-9a58-35f1ff92606e)/content

### Delete Image
# curl -X DELETE "http://localhost:4004/media/Pictures(da07ae51-d0d3-41e7-a737-2555a213e5a9)"
DELETE {{protocol}}://{{host}}:{{port}}/media/Pictures(da07ae51-d0d3-41e7-a737-2555a213e5a9) 

### Create Picture JPEG
# with mediatype provided the reading will work
POST {{protocol}}://{{host}}:{{port}}/media/Pictures
Accept: application/json
Content-Type: application/json

{ 
  "ID": "da07ae51-d0d3-41e7-a737-2555a213e5a8",
  "mediatype": "image/jpeg" 
}

### Upload Binary JPEG
PUT {{protocol}}://{{host}}:{{port}}/media/Pictures(da07ae51-d0d3-41e7-a737-2555a213e5a8)/content
Content-Type: image/jpeg

< ./Test.jpg

### Read Binary JPEG
GET {{protocol}}://{{host}}:{{port}}/media/Pictures(da07ae51-d0d3-41e7-a737-2555a213e5a8)/content

### Delete Image JPEG
DELETE {{protocol}}://{{host}}:{{port}}/media/Pictures(da07ae51-d0d3-41e7-a737-2555a213e5a8) 

